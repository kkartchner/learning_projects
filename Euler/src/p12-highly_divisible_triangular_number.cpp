#include <iostream>
#include <set>
#include <cmath>
#include <string> 

/**
 * "The sequence of triangle numbers is generated by adding the natural numbers.
 * So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28.
 * ...
 * 28 is the first triangle number to have over five divisors.
 * What is the value of the first triangle number to have over five hundred divisors?" 
 */
#define DEBUG 0
int main (int argc, char** argv)
{
    unsigned long curTriNumber = 0;

    for (int i = 1; ; ++i){
        curTriNumber += i;

        std::set<unsigned int> divisors;
        unsigned int sqroot = std::sqrt(curTriNumber);
        for (int j = 1; j <= sqroot; ++j){
            if (curTriNumber % j == 0){
                // j is divisor and so is curTriNumber/j
                divisors.insert(j);
                divisors.insert(curTriNumber/j);
            }
        }

        // Set divisor cap to commandline argv[1] if available, otherwise set to 500:
        int divisorCap = (argc > 1) ? std::stoi(argv[1]) : 500;

        // Print first occurence of a number with over divisorCap number of divisors and break 
        if (divisors.size() >= divisorCap){
            std::cout << "\nFirst triangle number with over " << divisorCap << " divisors is: " << curTriNumber << std::endl;
            if (argc > 2){
                int index = 0;
                for (auto num : divisors){ // Print each divisor from least to greatest
                    std::cout << ++index << ": " << num << std::endl; 
                }
            }
            break;
        }
    }

    return 0;
}
